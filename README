
Coding
------

Man braucht das Addon-SDK von Mozilla

    https://developer.mozilla.org/en-US/Add-ons/SDK

Dort ist das Tool 'cfx' enthalten.


Testing
-------

Mit dem Shell-Befehl

    $ cfx run

startet man eine neue Firefox-Instanz, in der der aktuelle Plugin-Code
ausgeführt wird. Zum Testen kann es sinnvoll sein, ein Profil mit installiertem
Firebug zu starten

    $ cfx --profiledir /home/<user>/.mozilla/firefox/<your profile>/ run


Bei jedem Start von Firefox, muss man die Jogustine Seite aufrufen und sich bei
Jogustine neue anmelden. Bei Testen ist das schnell recht langsam und
nervtötend. Deswegen verwendet man die Eigenschaft von Jogustine, dass dort
keine Cookies für die Sessions, sondern eine ID in jeder URL verwendet wird.
Die Prozedur ist die folgende:

1. Man meldet sich in einem normalen Firefox bei Jogustine an.
   Kopiert dann die URL der Seite und schreibt sie in die Datei lib/main.js
   in den Aufruf, der einen neuen Tab mit dieser URL öffnet. Es kann jede
   Unterseite von Jogustine verwendet werden.
2. Bei jeden Test mit "$ cfx test" wird jetzt nicht nur das Addon geladen,
   sondern auch gleich ein Tab im Firefox mit der Jogustine-Seite geöffnet.
   Wenn zwischen zwei Tests nicht mehr als ungefähr 20 Minuten vergehen,
   dann wird man aus die Jogustine-Session nicht automatisch ausgelogt.
3. Falls die Session doch abläuft, muss man sich neu anmelden und die neue URL
   nach lib/main.js kopieren.


Building
--------

Mit dem Befehl

    $ cfx xpi

erstellt man das Addon als XPI. Das XPI kann man dann in jeden beliebigen
Firefox als Addon installieren.


Use and Copyright
-----------------

Der Quellcode für das Addon (data/add-js-to-menu.js, lib/main.js) steht unter
GLPv3. Zu finden ist sie in der Datei COPYING oder online unter
https://www.gnu.org/licenses/gpl-3.0.txt

Der jquery-Code (data/jquery.js) steht unter der MIT Lizenz.
https://jquery.org/license/


Releasing
---------

Kurze Notizen (für mich), wie man das XPI erstellt und das Addon sauber
veröffentlicht.


1) addon-sdk aktualisieren

   $ cd ~/git/addon-sdk
   $ git checkout master
   $ git pull
   $ git checkout 1.17--put-updatekey-and-updateURL-in-package.json # auf meinen Branch wechseln
   $ git rebase master # Den Patch auf die neue Version portieren


2) addon-sdk initialisieren

   $ source bin/activate # addon-sdk aktivieren
   $ cd ~/git/happy-jogustine/

3) Versionsnummer in package.json erhöhen und ChangeLog aktualisieren

4) Mit dem gepatchten addon-sdk das XPI erzeugen

   $ cfx xpi

5) Das XPI mit der richtigen Versionsnummer umbenennen und in das
   Verzeichnis xpi/ verschieben

   $ mv happy-jogustine.xpi happy-jogustine-1.XX.xpi
   $ mv happy-jogustine-1.XX.xpi xpi/

6) Die Datei xpi/update1.unsigned.rdf editieren und dort die neu Version
   eintragen. Dazu einfach einen alten Eintrag kopieren. minVersion und
   maxVersion findet man im install.rdf im XPI. Die sha512 Checksum generiert
   man mit

   $ sha512sum xpi/happy-jogustine-1.XX.xpi

7) Das update1.unsigend.rdf zu update1.rdf kopieren, weil McCoy das update1.rdf
   gleich überschreibt. McCoy starten, Passwort eingeben und die Datei
   xpi/update1.rdf signieren.

   $ cp xpi/update1.unsigned.rdf xpi/update1.rdf
   # mccoy starten und signieren

8) Commiten und taggen
   $ git add package.json
   $ git add xpi/*
   $ git commit -s -m "release of version v1.XX"
   $ git tag -a -m "v1.XX" v1.XX

9) Dateien aus xpi/ auf den webserver laden und git Repository pushen
